"use strict";(self.webpackChunkcompose_destinations_docs=self.webpackChunkcompose_destinations_docs||[]).push([[395],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),v=i,m=c["".concat(l,".").concat(v)]||c[v]||u[v]||o;return t?a.createElement(m,r(r({ref:n},d),{},{components:t})):a.createElement(m,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=v;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},3461:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(3117),i=(t(7294),t(3905));const o={sidebar_position:1},r="Basics",s={unversionedId:"navigation/basics",id:"version-1.x/navigation/basics",title:"Basics",description:"To navigate to a destination you need a NavController or a DestinationsNavigator. Both are valid arguments for annotated Composables and will be provided by the library at runtime.",source:"@site/versioned_docs/version-1.x/navigation/basics.md",sourceDirName:"navigation",slug:"/navigation/basics",permalink:"/navigation/basics",draft:!1,editUrl:"https://github.com/raamcosta/compose-destinations-docs/edit/main/docusaurus/versioned_docs/version-1.x/navigation/basics.md",tags:[],version:"1.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Non-navigation parameters",permalink:"/destination-arguments/navhost-level-parameters"},next:{title:"Navigating back with a result",permalink:"/navigation/backresult"}},l={},p=[{value:"DestinationsNavigator vs NavController",id:"destinationsnavigator-vs-navcontroller",level:3},{value:"Avoiding duplicate navigation",id:"avoiding-duplicate-navigation",level:3}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basics"},"Basics"),(0,i.kt)("p",null,"To navigate to a destination you need a ",(0,i.kt)("inlineCode",{parentName:"p"},"NavController")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),". Both are valid arguments for annotated Composables and will be provided by the library at runtime."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),' is meant only for navigating from one screen to another. If you need some kind of "top-level navigation" (example: Bottom navigation bar, App drawer, etc) you should use the same ',(0,i.kt)("inlineCode",{parentName:"p"},"NavController")," instance you pass to ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavHost"),".")),(0,i.kt)("p",null,"Then you can:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"navigator.navigate(GreetingScreenDestination)\n\n// OR using NavController.navigate extension function\n\nnavController.navigate(GreetingScreenDestination)\n")),(0,i.kt)("p",null,"Or if the destination has navigation arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'// All arguments will be available in the invoke function, including the default values\nnavigator.navigate(ProfileScreenDestination(id = 1, groupName = "Kotlin 4ever <3"))\n// OR\nval navArgs = ProfileScreenDestination.NavArgs(id = 1, groupName = "Kotlin 4ever <3")\nnavigator.navigate(ProfileScreenDestination(navArgs))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'navController.navigate(ProfileScreenDestination(id = 1, groupName = "Kotlin 4ever <3"))\n// OR\nval navArgs = ProfileScreenDestination.NavArgs(id = 1, groupName = "Kotlin 4ever <3")\nnavController.navigate(ProfileScreenDestination(navArgs))\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"[YourComposableName]Destination.NavArgs")," is the default data class, but if you define a ",(0,i.kt)("inlineCode",{parentName:"p"},"navArgsDelegate")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Destination"),", than that will be used instead!")),(0,i.kt)("h3",{id:"destinationsnavigator-vs-navcontroller"},"DestinationsNavigator vs NavController"),(0,i.kt)("p",null,"It is good practice to not depend directly on ",(0,i.kt)("inlineCode",{parentName:"p"},"NavController")," on your Composables. You can opt to use ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," instead, which is an interface wrapper of ",(0,i.kt)("inlineCode",{parentName:"p"},"NavController"),". Making use of this dependency inversion principle allows you to easily pass an empty implementation (one is available already ",(0,i.kt)("inlineCode",{parentName:"p"},"EmptyDestinationsNavigator"),") for previews or a fake for testing."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," interface contains the main methods used to navigate that you would use with ",(0,i.kt)("inlineCode",{parentName:"p"},"NavController"),". That said, there are missing APIs, for example, navigating with URI. This seemed rare enough that we did not want to complicate ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),', but, if you have a use case you consider "common" and there is no way to do it with ',(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator"),", please open an issue so we can consider adding it. In the meantime, you can always fallback to ",(0,i.kt)("inlineCode",{parentName:"p"},"NavController"),", so you are always covered.")),(0,i.kt)("h3",{id:"avoiding-duplicate-navigation"},"Avoiding duplicate navigation"),(0,i.kt)("p",null,"If you dig around official Compose Samples, you will see this pattern of checking the state of the current ",(0,i.kt)("inlineCode",{parentName:"p"},"NavBackStackEntry")," and only navigating if it is ",(0,i.kt)("inlineCode",{parentName:"p"},"RESUMED"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationsNavigator")," can avoid duplicate navigation calls by using this same pattern under the hood if you simply pass ",(0,i.kt)("inlineCode",{parentName:"p"},"onlyIfResumed = true")," to the navigate call like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"navigator.navigate(ProfileScreenDestination(id = 1), onlyIfResumed = true)\n")))}u.isMDXComponent=!0}}]);