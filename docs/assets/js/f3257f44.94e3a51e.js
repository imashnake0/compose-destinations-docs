"use strict";(self.webpackChunkcompose_destinations_docs=self.webpackChunkcompose_destinations_docs||[]).push([[4938],{8435:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=i(4848),t=i(8453);const o={sidebar_position:1},s="Basics",r={id:"navigation/basics",title:"Basics",description:"To navigate to a destination you need a NavController or a DestinationsNavigator. Both are valid arguments for annotated Composables and will be provided by the library at runtime.",source:"@site/versioned_docs/version-1.x/navigation/basics.md",sourceDirName:"navigation",slug:"/navigation/basics",permalink:"/navigation/basics",draft:!1,unlisted:!1,editUrl:"https://github.com/raamcosta/compose-destinations-docs/edit/main/docusaurus/versioned_docs/version-1.x/navigation/basics.md",tags:[],version:"1.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Non-navigation parameters",permalink:"/destination-arguments/navhost-level-parameters"},next:{title:"Navigating back with a result",permalink:"/navigation/backresult"}},l={},d=[{value:"DestinationsNavigator vs NavController",id:"destinationsnavigator-vs-navcontroller",level:3},{value:"Avoiding duplicate navigation",id:"avoiding-duplicate-navigation",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"basics",children:"Basics"}),"\n",(0,a.jsxs)(n.p,{children:["To navigate to a destination you need a ",(0,a.jsx)(n.code,{children:"NavController"})," or a ",(0,a.jsx)(n.code,{children:"DestinationsNavigator"}),". Both are valid arguments for annotated Composables and will be provided by the library at runtime."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"DestinationsNavigator"}),' is meant only for navigating from one screen to another. If you need some kind of "top-level navigation" (example: Bottom navigation bar, App drawer, etc) you should use the same ',(0,a.jsx)(n.code,{children:"NavController"})," instance you pass to ",(0,a.jsx)(n.code,{children:"DestinationsNavHost"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:"Then you can:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"navigator.navigate(GreetingScreenDestination)\n\n// OR using NavController.navigate extension function\n\nnavController.navigate(GreetingScreenDestination)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Or if the destination has navigation arguments:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'// All arguments will be available in the invoke function, including the default values\nnavigator.navigate(ProfileScreenDestination(id = 1, groupName = "Kotlin 4ever <3"))\n// OR\nval navArgs = ProfileScreenDestination.NavArgs(id = 1, groupName = "Kotlin 4ever <3")\nnavigator.navigate(ProfileScreenDestination(navArgs))\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'navController.navigate(ProfileScreenDestination(id = 1, groupName = "Kotlin 4ever <3"))\n// OR\nval navArgs = ProfileScreenDestination.NavArgs(id = 1, groupName = "Kotlin 4ever <3")\nnavController.navigate(ProfileScreenDestination(navArgs))\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"[YourComposableName]Destination.NavArgs"})," is the default data class, but if you define a ",(0,a.jsx)(n.code,{children:"navArgsDelegate"})," on the ",(0,a.jsx)(n.code,{children:"@Destination"}),", than that will be used instead!"]})}),"\n",(0,a.jsx)(n.h3,{id:"destinationsnavigator-vs-navcontroller",children:"DestinationsNavigator vs NavController"}),"\n",(0,a.jsxs)(n.p,{children:["It is good practice to not depend directly on ",(0,a.jsx)(n.code,{children:"NavController"})," on your Composables. You can opt to use ",(0,a.jsx)(n.code,{children:"DestinationsNavigator"})," instead, which is an interface wrapper of ",(0,a.jsx)(n.code,{children:"NavController"}),". Making use of this dependency inversion principle allows you to easily pass an empty implementation (one is available already ",(0,a.jsx)(n.code,{children:"EmptyDestinationsNavigator"}),") for previews or a fake for testing."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"DestinationsNavigator"})," interface contains the main methods used to navigate that you would use with ",(0,a.jsx)(n.code,{children:"NavController"}),". That said, there are missing APIs, for example, navigating with URI. This seemed rare enough that we did not want to complicate ",(0,a.jsx)(n.code,{children:"DestinationsNavigator"}),', but, if you have a use case you consider "common" and there is no way to do it with ',(0,a.jsx)(n.code,{children:"DestinationsNavigator"}),", please open an issue so we can consider adding it. In the meantime, you can always fallback to ",(0,a.jsx)(n.code,{children:"NavController"}),", so you are always covered."]})}),"\n",(0,a.jsx)(n.h3,{id:"avoiding-duplicate-navigation",children:"Avoiding duplicate navigation"}),"\n",(0,a.jsxs)(n.p,{children:["If you dig around official Compose Samples, you will see this pattern of checking the state of the current ",(0,a.jsx)(n.code,{children:"NavBackStackEntry"})," and only navigating if it is ",(0,a.jsx)(n.code,{children:"RESUMED"}),". ",(0,a.jsx)(n.code,{children:"DestinationsNavigator"})," can avoid duplicate navigation calls by using this same pattern under the hood if you simply pass ",(0,a.jsx)(n.code,{children:"onlyIfResumed = true"})," to the navigate call like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"navigator.navigate(ProfileScreenDestination(id = 1), onlyIfResumed = true)\n"})})]})}function v(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var a=i(6540);const t={},o=a.createContext(t);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);